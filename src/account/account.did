type Decision = record {
  id : nat64;
  approved : bool;
  signee : principal;
  intent_id : nat64;
};
type Error = record { message : text };
type TransactionRequest = record {
  to : text;
  token : text;
  network : SupportedNetwork;
  amount : nat64;
  transaction_type : TransactionType;
};

type Transaction = record {
  to : text;
  token : text;
  network : SupportedNetwork;
  amount : nat64;
  transaction_type : TransactionType;
  status : IntentStatus;
};

type ProposedTransaction = record {
  id : nat64;
  to : text;
  token : text;
  network : SupportedNetwork;
  amount : nat64;
  transaction_type : TransactionType;
  signers : vec principal;
  rejections : vec principal;
};

type ProposeTransactionArgs = record {
  to : text;
  token : text;
  network : SupportedNetwork;
  amount : nat64;
  transaction_type : TransactionType;
};

type IntentStatus = variant {
  Failed : text;
  Rejected : text;
  InProgress : text;
  Completed : text;
  Pending : text;
};
type TransactionType = variant { Swap; Transfer };
type Result = variant { Ok : text; Err : Error };
type SupportedNetwork = variant { ETH; ICP };
service : () -> {
  add_subaccount : (text) -> (Result);
  add_icrc_account : (text) -> (Result);
  execute_transaction : (nat64) -> (IntentStatus);
  get_adapters : () -> (vec text) query;
  get_transactions : () -> (vec Transaction) query;
  get_signees : () -> (vec principal) query;
  get_tokens : () -> (vec text) query;
  get_subaccount : (text) -> (Result) query;
  get_debug_info : () -> (text) query;
  get_icrc_account : () -> (text) query;
  propose_transaction : (ProposeTransactionArgs) -> (ProposedTransaction);
  approve_transaction : (nat64) -> ();
  reject_transaction : (nat64) -> ();
  add_signer : (principal) -> (Result);
  set_threshold : (nat64) -> ();
  get_threshold : () -> (nat64) query;
  get_proposed_transaction : (nat64) -> (opt ProposedTransaction) query;
  get_proposed_transactions : () -> (vec ProposedTransaction) query;
}
